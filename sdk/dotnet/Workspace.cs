// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Frontegg
{
    [FronteggResourceType("frontegg:index/workspace:Workspace")]
    public partial class Workspace : Pulumi.CustomResource
    {
        /// <summary>
        /// Configures the admin portal.
        /// </summary>
        [Output("adminPortal")]
        public Output<Outputs.WorkspaceAdminPortal> AdminPortal { get; private set; } = null!;

        /// <summary>
        /// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
        /// responses.
        /// </summary>
        [Output("allowedOrigins")]
        public Output<ImmutableArray<string>> AllowedOrigins { get; private set; } = null!;

        /// <summary>
        /// Configures the general authentication policy.
        /// </summary>
        [Output("authPolicy")]
        public Output<Outputs.WorkspaceAuthPolicy> AuthPolicy { get; private set; } = null!;

        /// <summary>
        /// The backend stack of the application associated with the workspace.
        /// </summary>
        [Output("backendStack")]
        public Output<string> BackendStack { get; private set; } = null!;

        /// <summary>
        /// Configures the CAPTCHA policy in the signup form.
        /// </summary>
        [Output("captchaPolicy")]
        public Output<Outputs.WorkspaceCaptchaPolicy?> CaptchaPolicy { get; private set; } = null!;

        /// <summary>
        /// The country associated with the workspace.
        /// </summary>
        [Output("country")]
        public Output<string> Country { get; private set; } = null!;

        /// <summary>
        /// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
        /// points to "ssl.frontegg.com" before setting this field.
        /// </summary>
        [Output("customDomain")]
        public Output<string?> CustomDomain { get; private set; } = null!;

        /// <summary>
        /// Configures social login with Facebook.
        /// </summary>
        [Output("facebookSocialLogin")]
        public Output<Outputs.WorkspaceFacebookSocialLogin?> FacebookSocialLogin { get; private set; } = null!;

        /// <summary>
        /// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
        /// ".us.frontegg.com".
        /// </summary>
        [Output("fronteggDomain")]
        public Output<string> FronteggDomain { get; private set; } = null!;

        /// <summary>
        /// The frontend stack of the application associated with the worksapce.
        /// </summary>
        [Output("frontendStack")]
        public Output<string> FrontendStack { get; private set; } = null!;

        /// <summary>
        /// Configures social login with GitHub.
        /// </summary>
        [Output("githubSocialLogin")]
        public Output<Outputs.WorkspaceGithubSocialLogin?> GithubSocialLogin { get; private set; } = null!;

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Output("googleSocialLogin")]
        public Output<Outputs.WorkspaceGoogleSocialLogin?> GoogleSocialLogin { get; private set; } = null!;

        /// <summary>
        /// Configures Frontegg-hosted OAuth login.
        /// </summary>
        [Output("hostedLogin")]
        public Output<Outputs.WorkspaceHostedLogin?> HostedLogin { get; private set; } = null!;

        /// <summary>
        /// Configures the user lockout policy.
        /// </summary>
        [Output("lockoutPolicy")]
        public Output<Outputs.WorkspaceLockoutPolicy?> LockoutPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures the multi-factor authentication (MFA) via an authentication app.
        /// </summary>
        [Output("mfaAuthenticationApp")]
        public Output<Outputs.WorkspaceMfaAuthenticationApp?> MfaAuthenticationApp { get; private set; } = null!;

        /// <summary>
        /// Configures the multi-factor authentication (MFA) policy.
        /// </summary>
        [Output("mfaPolicy")]
        public Output<Outputs.WorkspaceMfaPolicy> MfaPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Output("microsoftSocialLogin")]
        public Output<Outputs.WorkspaceMicrosoftSocialLogin?> MicrosoftSocialLogin { get; private set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether the application associated with the workspace has OpenSaaS installed.
        /// </summary>
        [Output("openSaasInstalled")]
        public Output<bool> OpenSaasInstalled { get; private set; } = null!;

        /// <summary>
        /// Configures the password policy.
        /// </summary>
        [Output("passwordPolicy")]
        public Output<Outputs.WorkspacePasswordPolicy> PasswordPolicy { get; private set; } = null!;

        /// <summary>
        /// Configures the pwned password email.
        /// </summary>
        [Output("pwnedPasswordEmail")]
        public Output<Outputs.WorkspacePwnedPasswordEmail?> PwnedPasswordEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the password reset email.
        /// </summary>
        [Output("resetPasswordEmail")]
        public Output<Outputs.WorkspaceResetPasswordEmail?> ResetPasswordEmail { get; private set; } = null!;

        /// <summary>
        /// Configures SSO via SAML.
        /// </summary>
        [Output("saml")]
        public Output<Outputs.WorkspaceSaml?> Saml { get; private set; } = null!;

        /// <summary>
        /// Configures the user activation email.
        /// </summary>
        [Output("userActivationEmail")]
        public Output<Outputs.WorkspaceUserActivationEmail?> UserActivationEmail { get; private set; } = null!;

        /// <summary>
        /// Configures the user invitation email.
        /// </summary>
        [Output("userInvitationEmail")]
        public Output<Outputs.WorkspaceUserInvitationEmail?> UserInvitationEmail { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("frontegg:index/workspace:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
            : base("frontegg:index/workspace:Workspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/okera/pulumi-frontegg/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, state, options);
        }
    }

    public sealed class WorkspaceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures the admin portal.
        /// </summary>
        [Input("adminPortal", required: true)]
        public Input<Inputs.WorkspaceAdminPortalArgs> AdminPortal { get; set; } = null!;

        [Input("allowedOrigins", required: true)]
        private InputList<string>? _allowedOrigins;

        /// <summary>
        /// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
        /// responses.
        /// </summary>
        public InputList<string> AllowedOrigins
        {
            get => _allowedOrigins ?? (_allowedOrigins = new InputList<string>());
            set => _allowedOrigins = value;
        }

        /// <summary>
        /// Configures the general authentication policy.
        /// </summary>
        [Input("authPolicy", required: true)]
        public Input<Inputs.WorkspaceAuthPolicyArgs> AuthPolicy { get; set; } = null!;

        /// <summary>
        /// The backend stack of the application associated with the workspace.
        /// </summary>
        [Input("backendStack", required: true)]
        public Input<string> BackendStack { get; set; } = null!;

        /// <summary>
        /// Configures the CAPTCHA policy in the signup form.
        /// </summary>
        [Input("captchaPolicy")]
        public Input<Inputs.WorkspaceCaptchaPolicyArgs>? CaptchaPolicy { get; set; }

        /// <summary>
        /// The country associated with the workspace.
        /// </summary>
        [Input("country", required: true)]
        public Input<string> Country { get; set; } = null!;

        /// <summary>
        /// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
        /// points to "ssl.frontegg.com" before setting this field.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Configures social login with Facebook.
        /// </summary>
        [Input("facebookSocialLogin")]
        public Input<Inputs.WorkspaceFacebookSocialLoginArgs>? FacebookSocialLogin { get; set; }

        /// <summary>
        /// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
        /// ".us.frontegg.com".
        /// </summary>
        [Input("fronteggDomain", required: true)]
        public Input<string> FronteggDomain { get; set; } = null!;

        /// <summary>
        /// The frontend stack of the application associated with the worksapce.
        /// </summary>
        [Input("frontendStack", required: true)]
        public Input<string> FrontendStack { get; set; } = null!;

        /// <summary>
        /// Configures social login with GitHub.
        /// </summary>
        [Input("githubSocialLogin")]
        public Input<Inputs.WorkspaceGithubSocialLoginArgs>? GithubSocialLogin { get; set; }

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("googleSocialLogin")]
        public Input<Inputs.WorkspaceGoogleSocialLoginArgs>? GoogleSocialLogin { get; set; }

        /// <summary>
        /// Configures Frontegg-hosted OAuth login.
        /// </summary>
        [Input("hostedLogin")]
        public Input<Inputs.WorkspaceHostedLoginArgs>? HostedLogin { get; set; }

        /// <summary>
        /// Configures the user lockout policy.
        /// </summary>
        [Input("lockoutPolicy")]
        public Input<Inputs.WorkspaceLockoutPolicyArgs>? LockoutPolicy { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) via an authentication app.
        /// </summary>
        [Input("mfaAuthenticationApp")]
        public Input<Inputs.WorkspaceMfaAuthenticationAppArgs>? MfaAuthenticationApp { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) policy.
        /// </summary>
        [Input("mfaPolicy", required: true)]
        public Input<Inputs.WorkspaceMfaPolicyArgs> MfaPolicy { get; set; } = null!;

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("microsoftSocialLogin")]
        public Input<Inputs.WorkspaceMicrosoftSocialLoginArgs>? MicrosoftSocialLogin { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the application associated with the workspace has OpenSaaS installed.
        /// </summary>
        [Input("openSaasInstalled", required: true)]
        public Input<bool> OpenSaasInstalled { get; set; } = null!;

        /// <summary>
        /// Configures the password policy.
        /// </summary>
        [Input("passwordPolicy", required: true)]
        public Input<Inputs.WorkspacePasswordPolicyArgs> PasswordPolicy { get; set; } = null!;

        /// <summary>
        /// Configures the pwned password email.
        /// </summary>
        [Input("pwnedPasswordEmail")]
        public Input<Inputs.WorkspacePwnedPasswordEmailArgs>? PwnedPasswordEmail { get; set; }

        /// <summary>
        /// Configures the password reset email.
        /// </summary>
        [Input("resetPasswordEmail")]
        public Input<Inputs.WorkspaceResetPasswordEmailArgs>? ResetPasswordEmail { get; set; }

        /// <summary>
        /// Configures SSO via SAML.
        /// </summary>
        [Input("saml")]
        public Input<Inputs.WorkspaceSamlArgs>? Saml { get; set; }

        /// <summary>
        /// Configures the user activation email.
        /// </summary>
        [Input("userActivationEmail")]
        public Input<Inputs.WorkspaceUserActivationEmailArgs>? UserActivationEmail { get; set; }

        /// <summary>
        /// Configures the user invitation email.
        /// </summary>
        [Input("userInvitationEmail")]
        public Input<Inputs.WorkspaceUserInvitationEmailArgs>? UserInvitationEmail { get; set; }

        public WorkspaceArgs()
        {
        }
    }

    public sealed class WorkspaceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configures the admin portal.
        /// </summary>
        [Input("adminPortal")]
        public Input<Inputs.WorkspaceAdminPortalGetArgs>? AdminPortal { get; set; }

        [Input("allowedOrigins")]
        private InputList<string>? _allowedOrigins;

        /// <summary>
        /// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
        /// responses.
        /// </summary>
        public InputList<string> AllowedOrigins
        {
            get => _allowedOrigins ?? (_allowedOrigins = new InputList<string>());
            set => _allowedOrigins = value;
        }

        /// <summary>
        /// Configures the general authentication policy.
        /// </summary>
        [Input("authPolicy")]
        public Input<Inputs.WorkspaceAuthPolicyGetArgs>? AuthPolicy { get; set; }

        /// <summary>
        /// The backend stack of the application associated with the workspace.
        /// </summary>
        [Input("backendStack")]
        public Input<string>? BackendStack { get; set; }

        /// <summary>
        /// Configures the CAPTCHA policy in the signup form.
        /// </summary>
        [Input("captchaPolicy")]
        public Input<Inputs.WorkspaceCaptchaPolicyGetArgs>? CaptchaPolicy { get; set; }

        /// <summary>
        /// The country associated with the workspace.
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
        /// points to "ssl.frontegg.com" before setting this field.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Configures social login with Facebook.
        /// </summary>
        [Input("facebookSocialLogin")]
        public Input<Inputs.WorkspaceFacebookSocialLoginGetArgs>? FacebookSocialLogin { get; set; }

        /// <summary>
        /// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
        /// ".us.frontegg.com".
        /// </summary>
        [Input("fronteggDomain")]
        public Input<string>? FronteggDomain { get; set; }

        /// <summary>
        /// The frontend stack of the application associated with the worksapce.
        /// </summary>
        [Input("frontendStack")]
        public Input<string>? FrontendStack { get; set; }

        /// <summary>
        /// Configures social login with GitHub.
        /// </summary>
        [Input("githubSocialLogin")]
        public Input<Inputs.WorkspaceGithubSocialLoginGetArgs>? GithubSocialLogin { get; set; }

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("googleSocialLogin")]
        public Input<Inputs.WorkspaceGoogleSocialLoginGetArgs>? GoogleSocialLogin { get; set; }

        /// <summary>
        /// Configures Frontegg-hosted OAuth login.
        /// </summary>
        [Input("hostedLogin")]
        public Input<Inputs.WorkspaceHostedLoginGetArgs>? HostedLogin { get; set; }

        /// <summary>
        /// Configures the user lockout policy.
        /// </summary>
        [Input("lockoutPolicy")]
        public Input<Inputs.WorkspaceLockoutPolicyGetArgs>? LockoutPolicy { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) via an authentication app.
        /// </summary>
        [Input("mfaAuthenticationApp")]
        public Input<Inputs.WorkspaceMfaAuthenticationAppGetArgs>? MfaAuthenticationApp { get; set; }

        /// <summary>
        /// Configures the multi-factor authentication (MFA) policy.
        /// </summary>
        [Input("mfaPolicy")]
        public Input<Inputs.WorkspaceMfaPolicyGetArgs>? MfaPolicy { get; set; }

        /// <summary>
        /// Configures social login with Google.
        /// </summary>
        [Input("microsoftSocialLogin")]
        public Input<Inputs.WorkspaceMicrosoftSocialLoginGetArgs>? MicrosoftSocialLogin { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the application associated with the workspace has OpenSaaS installed.
        /// </summary>
        [Input("openSaasInstalled")]
        public Input<bool>? OpenSaasInstalled { get; set; }

        /// <summary>
        /// Configures the password policy.
        /// </summary>
        [Input("passwordPolicy")]
        public Input<Inputs.WorkspacePasswordPolicyGetArgs>? PasswordPolicy { get; set; }

        /// <summary>
        /// Configures the pwned password email.
        /// </summary>
        [Input("pwnedPasswordEmail")]
        public Input<Inputs.WorkspacePwnedPasswordEmailGetArgs>? PwnedPasswordEmail { get; set; }

        /// <summary>
        /// Configures the password reset email.
        /// </summary>
        [Input("resetPasswordEmail")]
        public Input<Inputs.WorkspaceResetPasswordEmailGetArgs>? ResetPasswordEmail { get; set; }

        /// <summary>
        /// Configures SSO via SAML.
        /// </summary>
        [Input("saml")]
        public Input<Inputs.WorkspaceSamlGetArgs>? Saml { get; set; }

        /// <summary>
        /// Configures the user activation email.
        /// </summary>
        [Input("userActivationEmail")]
        public Input<Inputs.WorkspaceUserActivationEmailGetArgs>? UserActivationEmail { get; set; }

        /// <summary>
        /// Configures the user invitation email.
        /// </summary>
        [Input("userInvitationEmail")]
        public Input<Inputs.WorkspaceUserInvitationEmailGetArgs>? UserInvitationEmail { get; set; }

        public WorkspaceState()
        {
        }
    }
}
