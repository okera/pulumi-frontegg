// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'frontegg:index/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * The timestamp at which the role was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Whether the role should be applied to new users by default.
     */
    public readonly default!: pulumi.Output<boolean>;
    /**
     * A human-readable description of the role.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * A human-readable identifier for the role.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The level of the role in the role hierarchy.
     */
    public readonly level!: pulumi.Output<number>;
    /**
     * A human-readable name for the role.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The IDs of the permissions that the role confers to its members.
     */
    public readonly permissionIds!: pulumi.Output<string[]>;
    /**
     * The ID of the tenant that owns the role.
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * The ID of the vendor that owns the role.
     */
    public /*out*/ readonly vendorId!: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissionIds"] = state ? state.permissionIds : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vendorId"] = state ? state.vendorId : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if ((!args || args.default === undefined) && !opts.urn) {
                throw new Error("Missing required property 'default'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.level === undefined) && !opts.urn) {
                throw new Error("Missing required property 'level'");
            }
            if ((!args || args.permissionIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionIds'");
            }
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissionIds"] = args ? args.permissionIds : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["vendorId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * The timestamp at which the role was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether the role should be applied to new users by default.
     */
    default?: pulumi.Input<boolean>;
    /**
     * A human-readable description of the role.
     */
    description?: pulumi.Input<string>;
    /**
     * A human-readable identifier for the role.
     */
    key?: pulumi.Input<string>;
    /**
     * The level of the role in the role hierarchy.
     */
    level?: pulumi.Input<number>;
    /**
     * A human-readable name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of the permissions that the role confers to its members.
     */
    permissionIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the tenant that owns the role.
     */
    tenantId?: pulumi.Input<string>;
    /**
     * The ID of the vendor that owns the role.
     */
    vendorId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * Whether the role should be applied to new users by default.
     */
    default: pulumi.Input<boolean>;
    /**
     * A human-readable description of the role.
     */
    description: pulumi.Input<string>;
    /**
     * A human-readable identifier for the role.
     */
    key: pulumi.Input<string>;
    /**
     * The level of the role in the role hierarchy.
     */
    level: pulumi.Input<number>;
    /**
     * A human-readable name for the role.
     */
    name?: pulumi.Input<string>;
    /**
     * The IDs of the permissions that the role confers to its members.
     */
    permissionIds: pulumi.Input<pulumi.Input<string>[]>;
}
