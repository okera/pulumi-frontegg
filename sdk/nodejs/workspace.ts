// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Workspace extends pulumi.CustomResource {
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkspaceState, opts?: pulumi.CustomResourceOptions): Workspace {
        return new Workspace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'frontegg:index/workspace:Workspace';

    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Workspace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }

    /**
     * Configures the admin portal.
     */
    public readonly adminPortal!: pulumi.Output<outputs.WorkspaceAdminPortal>;
    /**
     * The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
     * responses.
     */
    public readonly allowedOrigins!: pulumi.Output<string[]>;
    /**
     * Configures the general authentication policy.
     */
    public readonly authPolicy!: pulumi.Output<outputs.WorkspaceAuthPolicy>;
    /**
     * The backend stack of the application associated with the workspace.
     */
    public readonly backendStack!: pulumi.Output<string>;
    /**
     * Configures the CAPTCHA policy in the signup form.
     */
    public readonly captchaPolicy!: pulumi.Output<outputs.WorkspaceCaptchaPolicy | undefined>;
    /**
     * The country associated with the workspace.
     */
    public readonly country!: pulumi.Output<string>;
    /**
     * A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
     * points to "ssl.frontegg.com" before setting this field.
     */
    public readonly customDomain!: pulumi.Output<string | undefined>;
    /**
     * Configures social login with Facebook.
     */
    public readonly facebookSocialLogin!: pulumi.Output<outputs.WorkspaceFacebookSocialLogin | undefined>;
    /**
     * The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
     * ".us.frontegg.com".
     */
    public readonly fronteggDomain!: pulumi.Output<string>;
    /**
     * The frontend stack of the application associated with the worksapce.
     */
    public readonly frontendStack!: pulumi.Output<string>;
    /**
     * Configures social login with GitHub.
     */
    public readonly githubSocialLogin!: pulumi.Output<outputs.WorkspaceGithubSocialLogin | undefined>;
    /**
     * Configures social login with Google.
     */
    public readonly googleSocialLogin!: pulumi.Output<outputs.WorkspaceGoogleSocialLogin | undefined>;
    /**
     * Configures Frontegg-hosted OAuth login.
     */
    public readonly hostedLogin!: pulumi.Output<outputs.WorkspaceHostedLogin | undefined>;
    /**
     * Configures the user lockout policy.
     */
    public readonly lockoutPolicy!: pulumi.Output<outputs.WorkspaceLockoutPolicy | undefined>;
    /**
     * Configures the multi-factor authentication (MFA) via an authentication app.
     */
    public readonly mfaAuthenticationApp!: pulumi.Output<outputs.WorkspaceMfaAuthenticationApp | undefined>;
    /**
     * Configures the multi-factor authentication (MFA) policy.
     */
    public readonly mfaPolicy!: pulumi.Output<outputs.WorkspaceMfaPolicy>;
    /**
     * Configures social login with Google.
     */
    public readonly microsoftSocialLogin!: pulumi.Output<outputs.WorkspaceMicrosoftSocialLogin | undefined>;
    /**
     * The name of the workspace.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the application associated with the workspace has OpenSaaS installed.
     */
    public readonly openSaasInstalled!: pulumi.Output<boolean>;
    /**
     * Configures the password policy.
     */
    public readonly passwordPolicy!: pulumi.Output<outputs.WorkspacePasswordPolicy>;
    /**
     * Configures the pwned password email.
     */
    public readonly pwnedPasswordEmail!: pulumi.Output<outputs.WorkspacePwnedPasswordEmail | undefined>;
    /**
     * Configures the password reset email.
     */
    public readonly resetPasswordEmail!: pulumi.Output<outputs.WorkspaceResetPasswordEmail | undefined>;
    /**
     * Configures SSO via SAML.
     */
    public readonly saml!: pulumi.Output<outputs.WorkspaceSaml | undefined>;
    /**
     * Configures the user activation email.
     */
    public readonly userActivationEmail!: pulumi.Output<outputs.WorkspaceUserActivationEmail | undefined>;
    /**
     * Configures the user invitation email.
     */
    public readonly userInvitationEmail!: pulumi.Output<outputs.WorkspaceUserInvitationEmail | undefined>;

    /**
     * Create a Workspace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WorkspaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkspaceArgs | WorkspaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkspaceState | undefined;
            resourceInputs["adminPortal"] = state ? state.adminPortal : undefined;
            resourceInputs["allowedOrigins"] = state ? state.allowedOrigins : undefined;
            resourceInputs["authPolicy"] = state ? state.authPolicy : undefined;
            resourceInputs["backendStack"] = state ? state.backendStack : undefined;
            resourceInputs["captchaPolicy"] = state ? state.captchaPolicy : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["facebookSocialLogin"] = state ? state.facebookSocialLogin : undefined;
            resourceInputs["fronteggDomain"] = state ? state.fronteggDomain : undefined;
            resourceInputs["frontendStack"] = state ? state.frontendStack : undefined;
            resourceInputs["githubSocialLogin"] = state ? state.githubSocialLogin : undefined;
            resourceInputs["googleSocialLogin"] = state ? state.googleSocialLogin : undefined;
            resourceInputs["hostedLogin"] = state ? state.hostedLogin : undefined;
            resourceInputs["lockoutPolicy"] = state ? state.lockoutPolicy : undefined;
            resourceInputs["mfaAuthenticationApp"] = state ? state.mfaAuthenticationApp : undefined;
            resourceInputs["mfaPolicy"] = state ? state.mfaPolicy : undefined;
            resourceInputs["microsoftSocialLogin"] = state ? state.microsoftSocialLogin : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openSaasInstalled"] = state ? state.openSaasInstalled : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["pwnedPasswordEmail"] = state ? state.pwnedPasswordEmail : undefined;
            resourceInputs["resetPasswordEmail"] = state ? state.resetPasswordEmail : undefined;
            resourceInputs["saml"] = state ? state.saml : undefined;
            resourceInputs["userActivationEmail"] = state ? state.userActivationEmail : undefined;
            resourceInputs["userInvitationEmail"] = state ? state.userInvitationEmail : undefined;
        } else {
            const args = argsOrState as WorkspaceArgs | undefined;
            if ((!args || args.adminPortal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPortal'");
            }
            if ((!args || args.allowedOrigins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowedOrigins'");
            }
            if ((!args || args.authPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authPolicy'");
            }
            if ((!args || args.backendStack === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendStack'");
            }
            if ((!args || args.country === undefined) && !opts.urn) {
                throw new Error("Missing required property 'country'");
            }
            if ((!args || args.fronteggDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fronteggDomain'");
            }
            if ((!args || args.frontendStack === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendStack'");
            }
            if ((!args || args.mfaPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mfaPolicy'");
            }
            if ((!args || args.openSaasInstalled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'openSaasInstalled'");
            }
            if ((!args || args.passwordPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'passwordPolicy'");
            }
            resourceInputs["adminPortal"] = args ? args.adminPortal : undefined;
            resourceInputs["allowedOrigins"] = args ? args.allowedOrigins : undefined;
            resourceInputs["authPolicy"] = args ? args.authPolicy : undefined;
            resourceInputs["backendStack"] = args ? args.backendStack : undefined;
            resourceInputs["captchaPolicy"] = args ? args.captchaPolicy : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["facebookSocialLogin"] = args ? args.facebookSocialLogin : undefined;
            resourceInputs["fronteggDomain"] = args ? args.fronteggDomain : undefined;
            resourceInputs["frontendStack"] = args ? args.frontendStack : undefined;
            resourceInputs["githubSocialLogin"] = args ? args.githubSocialLogin : undefined;
            resourceInputs["googleSocialLogin"] = args ? args.googleSocialLogin : undefined;
            resourceInputs["hostedLogin"] = args ? args.hostedLogin : undefined;
            resourceInputs["lockoutPolicy"] = args ? args.lockoutPolicy : undefined;
            resourceInputs["mfaAuthenticationApp"] = args ? args.mfaAuthenticationApp : undefined;
            resourceInputs["mfaPolicy"] = args ? args.mfaPolicy : undefined;
            resourceInputs["microsoftSocialLogin"] = args ? args.microsoftSocialLogin : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openSaasInstalled"] = args ? args.openSaasInstalled : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["pwnedPasswordEmail"] = args ? args.pwnedPasswordEmail : undefined;
            resourceInputs["resetPasswordEmail"] = args ? args.resetPasswordEmail : undefined;
            resourceInputs["saml"] = args ? args.saml : undefined;
            resourceInputs["userActivationEmail"] = args ? args.userActivationEmail : undefined;
            resourceInputs["userInvitationEmail"] = args ? args.userInvitationEmail : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workspace.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Workspace resources.
 */
export interface WorkspaceState {
    /**
     * Configures the admin portal.
     */
    adminPortal?: pulumi.Input<inputs.WorkspaceAdminPortal>;
    /**
     * The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
     * responses.
     */
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configures the general authentication policy.
     */
    authPolicy?: pulumi.Input<inputs.WorkspaceAuthPolicy>;
    /**
     * The backend stack of the application associated with the workspace.
     */
    backendStack?: pulumi.Input<string>;
    /**
     * Configures the CAPTCHA policy in the signup form.
     */
    captchaPolicy?: pulumi.Input<inputs.WorkspaceCaptchaPolicy>;
    /**
     * The country associated with the workspace.
     */
    country?: pulumi.Input<string>;
    /**
     * A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
     * points to "ssl.frontegg.com" before setting this field.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Configures social login with Facebook.
     */
    facebookSocialLogin?: pulumi.Input<inputs.WorkspaceFacebookSocialLogin>;
    /**
     * The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
     * ".us.frontegg.com".
     */
    fronteggDomain?: pulumi.Input<string>;
    /**
     * The frontend stack of the application associated with the worksapce.
     */
    frontendStack?: pulumi.Input<string>;
    /**
     * Configures social login with GitHub.
     */
    githubSocialLogin?: pulumi.Input<inputs.WorkspaceGithubSocialLogin>;
    /**
     * Configures social login with Google.
     */
    googleSocialLogin?: pulumi.Input<inputs.WorkspaceGoogleSocialLogin>;
    /**
     * Configures Frontegg-hosted OAuth login.
     */
    hostedLogin?: pulumi.Input<inputs.WorkspaceHostedLogin>;
    /**
     * Configures the user lockout policy.
     */
    lockoutPolicy?: pulumi.Input<inputs.WorkspaceLockoutPolicy>;
    /**
     * Configures the multi-factor authentication (MFA) via an authentication app.
     */
    mfaAuthenticationApp?: pulumi.Input<inputs.WorkspaceMfaAuthenticationApp>;
    /**
     * Configures the multi-factor authentication (MFA) policy.
     */
    mfaPolicy?: pulumi.Input<inputs.WorkspaceMfaPolicy>;
    /**
     * Configures social login with Google.
     */
    microsoftSocialLogin?: pulumi.Input<inputs.WorkspaceMicrosoftSocialLogin>;
    /**
     * The name of the workspace.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the application associated with the workspace has OpenSaaS installed.
     */
    openSaasInstalled?: pulumi.Input<boolean>;
    /**
     * Configures the password policy.
     */
    passwordPolicy?: pulumi.Input<inputs.WorkspacePasswordPolicy>;
    /**
     * Configures the pwned password email.
     */
    pwnedPasswordEmail?: pulumi.Input<inputs.WorkspacePwnedPasswordEmail>;
    /**
     * Configures the password reset email.
     */
    resetPasswordEmail?: pulumi.Input<inputs.WorkspaceResetPasswordEmail>;
    /**
     * Configures SSO via SAML.
     */
    saml?: pulumi.Input<inputs.WorkspaceSaml>;
    /**
     * Configures the user activation email.
     */
    userActivationEmail?: pulumi.Input<inputs.WorkspaceUserActivationEmail>;
    /**
     * Configures the user invitation email.
     */
    userInvitationEmail?: pulumi.Input<inputs.WorkspaceUserInvitationEmail>;
}

/**
 * The set of arguments for constructing a Workspace resource.
 */
export interface WorkspaceArgs {
    /**
     * Configures the admin portal.
     */
    adminPortal: pulumi.Input<inputs.WorkspaceAdminPortal>;
    /**
     * The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
     * responses.
     */
    allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configures the general authentication policy.
     */
    authPolicy: pulumi.Input<inputs.WorkspaceAuthPolicy>;
    /**
     * The backend stack of the application associated with the workspace.
     */
    backendStack: pulumi.Input<string>;
    /**
     * Configures the CAPTCHA policy in the signup form.
     */
    captchaPolicy?: pulumi.Input<inputs.WorkspaceCaptchaPolicy>;
    /**
     * The country associated with the workspace.
     */
    country: pulumi.Input<string>;
    /**
     * A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
     * points to "ssl.frontegg.com" before setting this field.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Configures social login with Facebook.
     */
    facebookSocialLogin?: pulumi.Input<inputs.WorkspaceFacebookSocialLogin>;
    /**
     * The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
     * ".us.frontegg.com".
     */
    fronteggDomain: pulumi.Input<string>;
    /**
     * The frontend stack of the application associated with the worksapce.
     */
    frontendStack: pulumi.Input<string>;
    /**
     * Configures social login with GitHub.
     */
    githubSocialLogin?: pulumi.Input<inputs.WorkspaceGithubSocialLogin>;
    /**
     * Configures social login with Google.
     */
    googleSocialLogin?: pulumi.Input<inputs.WorkspaceGoogleSocialLogin>;
    /**
     * Configures Frontegg-hosted OAuth login.
     */
    hostedLogin?: pulumi.Input<inputs.WorkspaceHostedLogin>;
    /**
     * Configures the user lockout policy.
     */
    lockoutPolicy?: pulumi.Input<inputs.WorkspaceLockoutPolicy>;
    /**
     * Configures the multi-factor authentication (MFA) via an authentication app.
     */
    mfaAuthenticationApp?: pulumi.Input<inputs.WorkspaceMfaAuthenticationApp>;
    /**
     * Configures the multi-factor authentication (MFA) policy.
     */
    mfaPolicy: pulumi.Input<inputs.WorkspaceMfaPolicy>;
    /**
     * Configures social login with Google.
     */
    microsoftSocialLogin?: pulumi.Input<inputs.WorkspaceMicrosoftSocialLogin>;
    /**
     * The name of the workspace.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the application associated with the workspace has OpenSaaS installed.
     */
    openSaasInstalled: pulumi.Input<boolean>;
    /**
     * Configures the password policy.
     */
    passwordPolicy: pulumi.Input<inputs.WorkspacePasswordPolicy>;
    /**
     * Configures the pwned password email.
     */
    pwnedPasswordEmail?: pulumi.Input<inputs.WorkspacePwnedPasswordEmail>;
    /**
     * Configures the password reset email.
     */
    resetPasswordEmail?: pulumi.Input<inputs.WorkspaceResetPasswordEmail>;
    /**
     * Configures SSO via SAML.
     */
    saml?: pulumi.Input<inputs.WorkspaceSaml>;
    /**
     * Configures the user activation email.
     */
    userActivationEmail?: pulumi.Input<inputs.WorkspaceUserActivationEmail>;
    /**
     * Configures the user invitation email.
     */
    userInvitationEmail?: pulumi.Input<inputs.WorkspaceUserInvitationEmail>;
}
