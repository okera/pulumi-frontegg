// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package frontegg

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Webhook struct {
	pulumi.CustomResourceState

	// The timestamp at which the webhook was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A human-readable description of the webhook.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the webhook is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The names of the events to subscribe to.
	Events pulumi.StringArrayOutput `pulumi:"events"`
	// A human-readable name for the webhook.
	Name pulumi.StringOutput `pulumi:"name"`
	// A secret to include with the event.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// The ID of the tenant that owns the webhook.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The type of the webhook.
	Type pulumi.StringOutput `pulumi:"type"`
	// The URL to send events to.
	Url pulumi.StringOutput `pulumi:"url"`
	// The ID of the vendor that owns the webhook.
	VendorId pulumi.StringOutput `pulumi:"vendorId"`
}

// NewWebhook registers a new resource with the given unique name, arguments, and options.
func NewWebhook(ctx *pulumi.Context,
	name string, args *WebhookArgs, opts ...pulumi.ResourceOption) (*Webhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Events == nil {
		return nil, errors.New("invalid value for required argument 'Events'")
	}
	if args.Secret == nil {
		return nil, errors.New("invalid value for required argument 'Secret'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Webhook
	err := ctx.RegisterResource("frontegg:index/webhook:Webhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWebhook gets an existing Webhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WebhookState, opts ...pulumi.ResourceOption) (*Webhook, error) {
	var resource Webhook
	err := ctx.ReadResource("frontegg:index/webhook:Webhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Webhook resources.
type webhookState struct {
	// The timestamp at which the webhook was created.
	CreatedAt *string `pulumi:"createdAt"`
	// A human-readable description of the webhook.
	Description *string `pulumi:"description"`
	// Whether the webhook is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The names of the events to subscribe to.
	Events []string `pulumi:"events"`
	// A human-readable name for the webhook.
	Name *string `pulumi:"name"`
	// A secret to include with the event.
	Secret *string `pulumi:"secret"`
	// The ID of the tenant that owns the webhook.
	TenantId *string `pulumi:"tenantId"`
	// The type of the webhook.
	Type *string `pulumi:"type"`
	// The URL to send events to.
	Url *string `pulumi:"url"`
	// The ID of the vendor that owns the webhook.
	VendorId *string `pulumi:"vendorId"`
}

type WebhookState struct {
	// The timestamp at which the webhook was created.
	CreatedAt pulumi.StringPtrInput
	// A human-readable description of the webhook.
	Description pulumi.StringPtrInput
	// Whether the webhook is enabled.
	Enabled pulumi.BoolPtrInput
	// The names of the events to subscribe to.
	Events pulumi.StringArrayInput
	// A human-readable name for the webhook.
	Name pulumi.StringPtrInput
	// A secret to include with the event.
	Secret pulumi.StringPtrInput
	// The ID of the tenant that owns the webhook.
	TenantId pulumi.StringPtrInput
	// The type of the webhook.
	Type pulumi.StringPtrInput
	// The URL to send events to.
	Url pulumi.StringPtrInput
	// The ID of the vendor that owns the webhook.
	VendorId pulumi.StringPtrInput
}

func (WebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookState)(nil)).Elem()
}

type webhookArgs struct {
	// A human-readable description of the webhook.
	Description string `pulumi:"description"`
	// Whether the webhook is enabled.
	Enabled bool `pulumi:"enabled"`
	// The names of the events to subscribe to.
	Events []string `pulumi:"events"`
	// A human-readable name for the webhook.
	Name *string `pulumi:"name"`
	// A secret to include with the event.
	Secret string `pulumi:"secret"`
	// The URL to send events to.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Webhook resource.
type WebhookArgs struct {
	// A human-readable description of the webhook.
	Description pulumi.StringInput
	// Whether the webhook is enabled.
	Enabled pulumi.BoolInput
	// The names of the events to subscribe to.
	Events pulumi.StringArrayInput
	// A human-readable name for the webhook.
	Name pulumi.StringPtrInput
	// A secret to include with the event.
	Secret pulumi.StringInput
	// The URL to send events to.
	Url pulumi.StringInput
}

func (WebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*webhookArgs)(nil)).Elem()
}

type WebhookInput interface {
	pulumi.Input

	ToWebhookOutput() WebhookOutput
	ToWebhookOutputWithContext(ctx context.Context) WebhookOutput
}

func (*Webhook) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (i *Webhook) ToWebhookOutput() WebhookOutput {
	return i.ToWebhookOutputWithContext(context.Background())
}

func (i *Webhook) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookOutput)
}

// WebhookArrayInput is an input type that accepts WebhookArray and WebhookArrayOutput values.
// You can construct a concrete instance of `WebhookArrayInput` via:
//
//          WebhookArray{ WebhookArgs{...} }
type WebhookArrayInput interface {
	pulumi.Input

	ToWebhookArrayOutput() WebhookArrayOutput
	ToWebhookArrayOutputWithContext(context.Context) WebhookArrayOutput
}

type WebhookArray []WebhookInput

func (WebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (i WebhookArray) ToWebhookArrayOutput() WebhookArrayOutput {
	return i.ToWebhookArrayOutputWithContext(context.Background())
}

func (i WebhookArray) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookArrayOutput)
}

// WebhookMapInput is an input type that accepts WebhookMap and WebhookMapOutput values.
// You can construct a concrete instance of `WebhookMapInput` via:
//
//          WebhookMap{ "key": WebhookArgs{...} }
type WebhookMapInput interface {
	pulumi.Input

	ToWebhookMapOutput() WebhookMapOutput
	ToWebhookMapOutputWithContext(context.Context) WebhookMapOutput
}

type WebhookMap map[string]WebhookInput

func (WebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (i WebhookMap) ToWebhookMapOutput() WebhookMapOutput {
	return i.ToWebhookMapOutputWithContext(context.Background())
}

func (i WebhookMap) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WebhookMapOutput)
}

type WebhookOutput struct{ *pulumi.OutputState }

func (WebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Webhook)(nil)).Elem()
}

func (o WebhookOutput) ToWebhookOutput() WebhookOutput {
	return o
}

func (o WebhookOutput) ToWebhookOutputWithContext(ctx context.Context) WebhookOutput {
	return o
}

type WebhookArrayOutput struct{ *pulumi.OutputState }

func (WebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Webhook)(nil)).Elem()
}

func (o WebhookArrayOutput) ToWebhookArrayOutput() WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) ToWebhookArrayOutputWithContext(ctx context.Context) WebhookArrayOutput {
	return o
}

func (o WebhookArrayOutput) Index(i pulumi.IntInput) WebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].([]*Webhook)[vs[1].(int)]
	}).(WebhookOutput)
}

type WebhookMapOutput struct{ *pulumi.OutputState }

func (WebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Webhook)(nil)).Elem()
}

func (o WebhookMapOutput) ToWebhookMapOutput() WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) ToWebhookMapOutputWithContext(ctx context.Context) WebhookMapOutput {
	return o
}

func (o WebhookMapOutput) MapIndex(k pulumi.StringInput) WebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Webhook {
		return vs[0].(map[string]*Webhook)[vs[1].(string)]
	}).(WebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookInput)(nil)).Elem(), &Webhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookArrayInput)(nil)).Elem(), WebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WebhookMapInput)(nil)).Elem(), WebhookMap{})
	pulumi.RegisterOutputType(WebhookOutput{})
	pulumi.RegisterOutputType(WebhookArrayOutput{})
	pulumi.RegisterOutputType(WebhookMapOutput{})
}
