// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package frontegg

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RedirectUri struct {
	pulumi.CustomResourceState

	// The redirect URI key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The redirect URI.
	RedirectUri pulumi.StringOutput `pulumi:"redirectUri"`
}

// NewRedirectUri registers a new resource with the given unique name, arguments, and options.
func NewRedirectUri(ctx *pulumi.Context,
	name string, args *RedirectUriArgs, opts ...pulumi.ResourceOption) (*RedirectUri, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RedirectUri == nil {
		return nil, errors.New("invalid value for required argument 'RedirectUri'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RedirectUri
	err := ctx.RegisterResource("frontegg:index/redirectUri:RedirectUri", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRedirectUri gets an existing RedirectUri resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRedirectUri(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RedirectUriState, opts ...pulumi.ResourceOption) (*RedirectUri, error) {
	var resource RedirectUri
	err := ctx.ReadResource("frontegg:index/redirectUri:RedirectUri", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RedirectUri resources.
type redirectUriState struct {
	// The redirect URI key.
	Key *string `pulumi:"key"`
	// The redirect URI.
	RedirectUri *string `pulumi:"redirectUri"`
}

type RedirectUriState struct {
	// The redirect URI key.
	Key pulumi.StringPtrInput
	// The redirect URI.
	RedirectUri pulumi.StringPtrInput
}

func (RedirectUriState) ElementType() reflect.Type {
	return reflect.TypeOf((*redirectUriState)(nil)).Elem()
}

type redirectUriArgs struct {
	// The redirect URI.
	RedirectUri string `pulumi:"redirectUri"`
}

// The set of arguments for constructing a RedirectUri resource.
type RedirectUriArgs struct {
	// The redirect URI.
	RedirectUri pulumi.StringInput
}

func (RedirectUriArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*redirectUriArgs)(nil)).Elem()
}

type RedirectUriInput interface {
	pulumi.Input

	ToRedirectUriOutput() RedirectUriOutput
	ToRedirectUriOutputWithContext(ctx context.Context) RedirectUriOutput
}

func (*RedirectUri) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectUri)(nil)).Elem()
}

func (i *RedirectUri) ToRedirectUriOutput() RedirectUriOutput {
	return i.ToRedirectUriOutputWithContext(context.Background())
}

func (i *RedirectUri) ToRedirectUriOutputWithContext(ctx context.Context) RedirectUriOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectUriOutput)
}

// RedirectUriArrayInput is an input type that accepts RedirectUriArray and RedirectUriArrayOutput values.
// You can construct a concrete instance of `RedirectUriArrayInput` via:
//
//          RedirectUriArray{ RedirectUriArgs{...} }
type RedirectUriArrayInput interface {
	pulumi.Input

	ToRedirectUriArrayOutput() RedirectUriArrayOutput
	ToRedirectUriArrayOutputWithContext(context.Context) RedirectUriArrayOutput
}

type RedirectUriArray []RedirectUriInput

func (RedirectUriArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedirectUri)(nil)).Elem()
}

func (i RedirectUriArray) ToRedirectUriArrayOutput() RedirectUriArrayOutput {
	return i.ToRedirectUriArrayOutputWithContext(context.Background())
}

func (i RedirectUriArray) ToRedirectUriArrayOutputWithContext(ctx context.Context) RedirectUriArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectUriArrayOutput)
}

// RedirectUriMapInput is an input type that accepts RedirectUriMap and RedirectUriMapOutput values.
// You can construct a concrete instance of `RedirectUriMapInput` via:
//
//          RedirectUriMap{ "key": RedirectUriArgs{...} }
type RedirectUriMapInput interface {
	pulumi.Input

	ToRedirectUriMapOutput() RedirectUriMapOutput
	ToRedirectUriMapOutputWithContext(context.Context) RedirectUriMapOutput
}

type RedirectUriMap map[string]RedirectUriInput

func (RedirectUriMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedirectUri)(nil)).Elem()
}

func (i RedirectUriMap) ToRedirectUriMapOutput() RedirectUriMapOutput {
	return i.ToRedirectUriMapOutputWithContext(context.Background())
}

func (i RedirectUriMap) ToRedirectUriMapOutputWithContext(ctx context.Context) RedirectUriMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RedirectUriMapOutput)
}

type RedirectUriOutput struct{ *pulumi.OutputState }

func (RedirectUriOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RedirectUri)(nil)).Elem()
}

func (o RedirectUriOutput) ToRedirectUriOutput() RedirectUriOutput {
	return o
}

func (o RedirectUriOutput) ToRedirectUriOutputWithContext(ctx context.Context) RedirectUriOutput {
	return o
}

type RedirectUriArrayOutput struct{ *pulumi.OutputState }

func (RedirectUriArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RedirectUri)(nil)).Elem()
}

func (o RedirectUriArrayOutput) ToRedirectUriArrayOutput() RedirectUriArrayOutput {
	return o
}

func (o RedirectUriArrayOutput) ToRedirectUriArrayOutputWithContext(ctx context.Context) RedirectUriArrayOutput {
	return o
}

func (o RedirectUriArrayOutput) Index(i pulumi.IntInput) RedirectUriOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RedirectUri {
		return vs[0].([]*RedirectUri)[vs[1].(int)]
	}).(RedirectUriOutput)
}

type RedirectUriMapOutput struct{ *pulumi.OutputState }

func (RedirectUriMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RedirectUri)(nil)).Elem()
}

func (o RedirectUriMapOutput) ToRedirectUriMapOutput() RedirectUriMapOutput {
	return o
}

func (o RedirectUriMapOutput) ToRedirectUriMapOutputWithContext(ctx context.Context) RedirectUriMapOutput {
	return o
}

func (o RedirectUriMapOutput) MapIndex(k pulumi.StringInput) RedirectUriOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RedirectUri {
		return vs[0].(map[string]*RedirectUri)[vs[1].(string)]
	}).(RedirectUriOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectUriInput)(nil)).Elem(), &RedirectUri{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectUriArrayInput)(nil)).Elem(), RedirectUriArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RedirectUriMapInput)(nil)).Elem(), RedirectUriMap{})
	pulumi.RegisterOutputType(RedirectUriOutput{})
	pulumi.RegisterOutputType(RedirectUriArrayOutput{})
	pulumi.RegisterOutputType(RedirectUriMapOutput{})
}
