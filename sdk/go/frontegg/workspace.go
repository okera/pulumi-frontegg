// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package frontegg

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Workspace struct {
	pulumi.CustomResourceState

	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortalOutput `pulumi:"adminPortal"`
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins pulumi.StringArrayOutput `pulumi:"allowedOrigins"`
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicyOutput `pulumi:"authPolicy"`
	// The backend stack of the application associated with the workspace.
	BackendStack pulumi.StringOutput `pulumi:"backendStack"`
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy WorkspaceCaptchaPolicyPtrOutput `pulumi:"captchaPolicy"`
	// The country associated with the workspace.
	Country pulumi.StringOutput `pulumi:"country"`
	// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
	// points to "ssl.frontegg.com" before setting this field.
	CustomDomain pulumi.StringPtrOutput `pulumi:"customDomain"`
	// Configures social login with Facebook.
	FacebookSocialLogin WorkspaceFacebookSocialLoginPtrOutput `pulumi:"facebookSocialLogin"`
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain pulumi.StringOutput `pulumi:"fronteggDomain"`
	// The frontend stack of the application associated with the worksapce.
	FrontendStack pulumi.StringOutput `pulumi:"frontendStack"`
	// Configures social login with GitHub.
	GithubSocialLogin WorkspaceGithubSocialLoginPtrOutput `pulumi:"githubSocialLogin"`
	// Configures social login with Google.
	GoogleSocialLogin WorkspaceGoogleSocialLoginPtrOutput `pulumi:"googleSocialLogin"`
	// Configures Frontegg-hosted OAuth login.
	HostedLogin WorkspaceHostedLoginPtrOutput `pulumi:"hostedLogin"`
	// Configures the user lockout policy.
	LockoutPolicy WorkspaceLockoutPolicyPtrOutput `pulumi:"lockoutPolicy"`
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp WorkspaceMfaAuthenticationAppPtrOutput `pulumi:"mfaAuthenticationApp"`
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicyOutput `pulumi:"mfaPolicy"`
	// Configures social login with Google.
	MicrosoftSocialLogin WorkspaceMicrosoftSocialLoginPtrOutput `pulumi:"microsoftSocialLogin"`
	// The name of the workspace.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled pulumi.BoolOutput `pulumi:"openSaasInstalled"`
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicyOutput `pulumi:"passwordPolicy"`
	// Configures the pwned password email.
	PwnedPasswordEmail WorkspacePwnedPasswordEmailPtrOutput `pulumi:"pwnedPasswordEmail"`
	// Configures the password reset email.
	ResetPasswordEmail WorkspaceResetPasswordEmailPtrOutput `pulumi:"resetPasswordEmail"`
	// Configures SSO via SAML.
	Saml WorkspaceSamlPtrOutput `pulumi:"saml"`
	// Configures the user activation email.
	UserActivationEmail WorkspaceUserActivationEmailPtrOutput `pulumi:"userActivationEmail"`
	// Configures the user invitation email.
	UserInvitationEmail WorkspaceUserInvitationEmailPtrOutput `pulumi:"userInvitationEmail"`
}

// NewWorkspace registers a new resource with the given unique name, arguments, and options.
func NewWorkspace(ctx *pulumi.Context,
	name string, args *WorkspaceArgs, opts ...pulumi.ResourceOption) (*Workspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdminPortal == nil {
		return nil, errors.New("invalid value for required argument 'AdminPortal'")
	}
	if args.AllowedOrigins == nil {
		return nil, errors.New("invalid value for required argument 'AllowedOrigins'")
	}
	if args.AuthPolicy == nil {
		return nil, errors.New("invalid value for required argument 'AuthPolicy'")
	}
	if args.BackendStack == nil {
		return nil, errors.New("invalid value for required argument 'BackendStack'")
	}
	if args.Country == nil {
		return nil, errors.New("invalid value for required argument 'Country'")
	}
	if args.FronteggDomain == nil {
		return nil, errors.New("invalid value for required argument 'FronteggDomain'")
	}
	if args.FrontendStack == nil {
		return nil, errors.New("invalid value for required argument 'FrontendStack'")
	}
	if args.MfaPolicy == nil {
		return nil, errors.New("invalid value for required argument 'MfaPolicy'")
	}
	if args.OpenSaasInstalled == nil {
		return nil, errors.New("invalid value for required argument 'OpenSaasInstalled'")
	}
	if args.PasswordPolicy == nil {
		return nil, errors.New("invalid value for required argument 'PasswordPolicy'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Workspace
	err := ctx.RegisterResource("frontegg:index/workspace:Workspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkspace gets an existing Workspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkspaceState, opts ...pulumi.ResourceOption) (*Workspace, error) {
	var resource Workspace
	err := ctx.ReadResource("frontegg:index/workspace:Workspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Workspace resources.
type workspaceState struct {
	// Configures the admin portal.
	AdminPortal *WorkspaceAdminPortal `pulumi:"adminPortal"`
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Configures the general authentication policy.
	AuthPolicy *WorkspaceAuthPolicy `pulumi:"authPolicy"`
	// The backend stack of the application associated with the workspace.
	BackendStack *string `pulumi:"backendStack"`
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy *WorkspaceCaptchaPolicy `pulumi:"captchaPolicy"`
	// The country associated with the workspace.
	Country *string `pulumi:"country"`
	// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
	// points to "ssl.frontegg.com" before setting this field.
	CustomDomain *string `pulumi:"customDomain"`
	// Configures social login with Facebook.
	FacebookSocialLogin *WorkspaceFacebookSocialLogin `pulumi:"facebookSocialLogin"`
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain *string `pulumi:"fronteggDomain"`
	// The frontend stack of the application associated with the worksapce.
	FrontendStack *string `pulumi:"frontendStack"`
	// Configures social login with GitHub.
	GithubSocialLogin *WorkspaceGithubSocialLogin `pulumi:"githubSocialLogin"`
	// Configures social login with Google.
	GoogleSocialLogin *WorkspaceGoogleSocialLogin `pulumi:"googleSocialLogin"`
	// Configures Frontegg-hosted OAuth login.
	HostedLogin *WorkspaceHostedLogin `pulumi:"hostedLogin"`
	// Configures the user lockout policy.
	LockoutPolicy *WorkspaceLockoutPolicy `pulumi:"lockoutPolicy"`
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp *WorkspaceMfaAuthenticationApp `pulumi:"mfaAuthenticationApp"`
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy *WorkspaceMfaPolicy `pulumi:"mfaPolicy"`
	// Configures social login with Google.
	MicrosoftSocialLogin *WorkspaceMicrosoftSocialLogin `pulumi:"microsoftSocialLogin"`
	// The name of the workspace.
	Name *string `pulumi:"name"`
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled *bool `pulumi:"openSaasInstalled"`
	// Configures the password policy.
	PasswordPolicy *WorkspacePasswordPolicy `pulumi:"passwordPolicy"`
	// Configures the pwned password email.
	PwnedPasswordEmail *WorkspacePwnedPasswordEmail `pulumi:"pwnedPasswordEmail"`
	// Configures the password reset email.
	ResetPasswordEmail *WorkspaceResetPasswordEmail `pulumi:"resetPasswordEmail"`
	// Configures SSO via SAML.
	Saml *WorkspaceSaml `pulumi:"saml"`
	// Configures the user activation email.
	UserActivationEmail *WorkspaceUserActivationEmail `pulumi:"userActivationEmail"`
	// Configures the user invitation email.
	UserInvitationEmail *WorkspaceUserInvitationEmail `pulumi:"userInvitationEmail"`
}

type WorkspaceState struct {
	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortalPtrInput
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins pulumi.StringArrayInput
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicyPtrInput
	// The backend stack of the application associated with the workspace.
	BackendStack pulumi.StringPtrInput
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy WorkspaceCaptchaPolicyPtrInput
	// The country associated with the workspace.
	Country pulumi.StringPtrInput
	// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
	// points to "ssl.frontegg.com" before setting this field.
	CustomDomain pulumi.StringPtrInput
	// Configures social login with Facebook.
	FacebookSocialLogin WorkspaceFacebookSocialLoginPtrInput
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain pulumi.StringPtrInput
	// The frontend stack of the application associated with the worksapce.
	FrontendStack pulumi.StringPtrInput
	// Configures social login with GitHub.
	GithubSocialLogin WorkspaceGithubSocialLoginPtrInput
	// Configures social login with Google.
	GoogleSocialLogin WorkspaceGoogleSocialLoginPtrInput
	// Configures Frontegg-hosted OAuth login.
	HostedLogin WorkspaceHostedLoginPtrInput
	// Configures the user lockout policy.
	LockoutPolicy WorkspaceLockoutPolicyPtrInput
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp WorkspaceMfaAuthenticationAppPtrInput
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicyPtrInput
	// Configures social login with Google.
	MicrosoftSocialLogin WorkspaceMicrosoftSocialLoginPtrInput
	// The name of the workspace.
	Name pulumi.StringPtrInput
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled pulumi.BoolPtrInput
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicyPtrInput
	// Configures the pwned password email.
	PwnedPasswordEmail WorkspacePwnedPasswordEmailPtrInput
	// Configures the password reset email.
	ResetPasswordEmail WorkspaceResetPasswordEmailPtrInput
	// Configures SSO via SAML.
	Saml WorkspaceSamlPtrInput
	// Configures the user activation email.
	UserActivationEmail WorkspaceUserActivationEmailPtrInput
	// Configures the user invitation email.
	UserInvitationEmail WorkspaceUserInvitationEmailPtrInput
}

func (WorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceState)(nil)).Elem()
}

type workspaceArgs struct {
	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortal `pulumi:"adminPortal"`
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicy `pulumi:"authPolicy"`
	// The backend stack of the application associated with the workspace.
	BackendStack string `pulumi:"backendStack"`
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy *WorkspaceCaptchaPolicy `pulumi:"captchaPolicy"`
	// The country associated with the workspace.
	Country string `pulumi:"country"`
	// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
	// points to "ssl.frontegg.com" before setting this field.
	CustomDomain *string `pulumi:"customDomain"`
	// Configures social login with Facebook.
	FacebookSocialLogin *WorkspaceFacebookSocialLogin `pulumi:"facebookSocialLogin"`
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain string `pulumi:"fronteggDomain"`
	// The frontend stack of the application associated with the worksapce.
	FrontendStack string `pulumi:"frontendStack"`
	// Configures social login with GitHub.
	GithubSocialLogin *WorkspaceGithubSocialLogin `pulumi:"githubSocialLogin"`
	// Configures social login with Google.
	GoogleSocialLogin *WorkspaceGoogleSocialLogin `pulumi:"googleSocialLogin"`
	// Configures Frontegg-hosted OAuth login.
	HostedLogin *WorkspaceHostedLogin `pulumi:"hostedLogin"`
	// Configures the user lockout policy.
	LockoutPolicy *WorkspaceLockoutPolicy `pulumi:"lockoutPolicy"`
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp *WorkspaceMfaAuthenticationApp `pulumi:"mfaAuthenticationApp"`
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicy `pulumi:"mfaPolicy"`
	// Configures social login with Google.
	MicrosoftSocialLogin *WorkspaceMicrosoftSocialLogin `pulumi:"microsoftSocialLogin"`
	// The name of the workspace.
	Name *string `pulumi:"name"`
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled bool `pulumi:"openSaasInstalled"`
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicy `pulumi:"passwordPolicy"`
	// Configures the pwned password email.
	PwnedPasswordEmail *WorkspacePwnedPasswordEmail `pulumi:"pwnedPasswordEmail"`
	// Configures the password reset email.
	ResetPasswordEmail *WorkspaceResetPasswordEmail `pulumi:"resetPasswordEmail"`
	// Configures SSO via SAML.
	Saml *WorkspaceSaml `pulumi:"saml"`
	// Configures the user activation email.
	UserActivationEmail *WorkspaceUserActivationEmail `pulumi:"userActivationEmail"`
	// Configures the user invitation email.
	UserInvitationEmail *WorkspaceUserInvitationEmail `pulumi:"userInvitationEmail"`
}

// The set of arguments for constructing a Workspace resource.
type WorkspaceArgs struct {
	// Configures the admin portal.
	AdminPortal WorkspaceAdminPortalInput
	// The origins that are allowed to access the workspace. This parameter controls the value of the "Origin" header for API
	// responses.
	AllowedOrigins pulumi.StringArrayInput
	// Configures the general authentication policy.
	AuthPolicy WorkspaceAuthPolicyInput
	// The backend stack of the application associated with the workspace.
	BackendStack pulumi.StringInput
	// Configures the CAPTCHA policy in the signup form.
	CaptchaPolicy WorkspaceCaptchaPolicyPtrInput
	// The country associated with the workspace.
	Country pulumi.StringInput
	// A custom domain at which Frontegg services will be reachable. You must configure a CNAME record for this domain that
	// points to "ssl.frontegg.com" before setting this field.
	CustomDomain pulumi.StringPtrInput
	// Configures social login with Facebook.
	FacebookSocialLogin WorkspaceFacebookSocialLoginPtrInput
	// The domain at which the Frontegg API is served for this workspace. The domain must end with ".frontegg.com" or
	// ".us.frontegg.com".
	FronteggDomain pulumi.StringInput
	// The frontend stack of the application associated with the worksapce.
	FrontendStack pulumi.StringInput
	// Configures social login with GitHub.
	GithubSocialLogin WorkspaceGithubSocialLoginPtrInput
	// Configures social login with Google.
	GoogleSocialLogin WorkspaceGoogleSocialLoginPtrInput
	// Configures Frontegg-hosted OAuth login.
	HostedLogin WorkspaceHostedLoginPtrInput
	// Configures the user lockout policy.
	LockoutPolicy WorkspaceLockoutPolicyPtrInput
	// Configures the multi-factor authentication (MFA) via an authentication app.
	MfaAuthenticationApp WorkspaceMfaAuthenticationAppPtrInput
	// Configures the multi-factor authentication (MFA) policy.
	MfaPolicy WorkspaceMfaPolicyInput
	// Configures social login with Google.
	MicrosoftSocialLogin WorkspaceMicrosoftSocialLoginPtrInput
	// The name of the workspace.
	Name pulumi.StringPtrInput
	// Whether the application associated with the workspace has OpenSaaS installed.
	OpenSaasInstalled pulumi.BoolInput
	// Configures the password policy.
	PasswordPolicy WorkspacePasswordPolicyInput
	// Configures the pwned password email.
	PwnedPasswordEmail WorkspacePwnedPasswordEmailPtrInput
	// Configures the password reset email.
	ResetPasswordEmail WorkspaceResetPasswordEmailPtrInput
	// Configures SSO via SAML.
	Saml WorkspaceSamlPtrInput
	// Configures the user activation email.
	UserActivationEmail WorkspaceUserActivationEmailPtrInput
	// Configures the user invitation email.
	UserInvitationEmail WorkspaceUserInvitationEmailPtrInput
}

func (WorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workspaceArgs)(nil)).Elem()
}

type WorkspaceInput interface {
	pulumi.Input

	ToWorkspaceOutput() WorkspaceOutput
	ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput
}

func (*Workspace) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (i *Workspace) ToWorkspaceOutput() WorkspaceOutput {
	return i.ToWorkspaceOutputWithContext(context.Background())
}

func (i *Workspace) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceOutput)
}

// WorkspaceArrayInput is an input type that accepts WorkspaceArray and WorkspaceArrayOutput values.
// You can construct a concrete instance of `WorkspaceArrayInput` via:
//
//          WorkspaceArray{ WorkspaceArgs{...} }
type WorkspaceArrayInput interface {
	pulumi.Input

	ToWorkspaceArrayOutput() WorkspaceArrayOutput
	ToWorkspaceArrayOutputWithContext(context.Context) WorkspaceArrayOutput
}

type WorkspaceArray []WorkspaceInput

func (WorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (i WorkspaceArray) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return i.ToWorkspaceArrayOutputWithContext(context.Background())
}

func (i WorkspaceArray) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceArrayOutput)
}

// WorkspaceMapInput is an input type that accepts WorkspaceMap and WorkspaceMapOutput values.
// You can construct a concrete instance of `WorkspaceMapInput` via:
//
//          WorkspaceMap{ "key": WorkspaceArgs{...} }
type WorkspaceMapInput interface {
	pulumi.Input

	ToWorkspaceMapOutput() WorkspaceMapOutput
	ToWorkspaceMapOutputWithContext(context.Context) WorkspaceMapOutput
}

type WorkspaceMap map[string]WorkspaceInput

func (WorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (i WorkspaceMap) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return i.ToWorkspaceMapOutputWithContext(context.Background())
}

func (i WorkspaceMap) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceMapOutput)
}

type WorkspaceOutput struct{ *pulumi.OutputState }

func (WorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Workspace)(nil)).Elem()
}

func (o WorkspaceOutput) ToWorkspaceOutput() WorkspaceOutput {
	return o
}

func (o WorkspaceOutput) ToWorkspaceOutputWithContext(ctx context.Context) WorkspaceOutput {
	return o
}

type WorkspaceArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Workspace)(nil)).Elem()
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutput() WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) ToWorkspaceArrayOutputWithContext(ctx context.Context) WorkspaceArrayOutput {
	return o
}

func (o WorkspaceArrayOutput) Index(i pulumi.IntInput) WorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].([]*Workspace)[vs[1].(int)]
	}).(WorkspaceOutput)
}

type WorkspaceMapOutput struct{ *pulumi.OutputState }

func (WorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Workspace)(nil)).Elem()
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutput() WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) ToWorkspaceMapOutputWithContext(ctx context.Context) WorkspaceMapOutput {
	return o
}

func (o WorkspaceMapOutput) MapIndex(k pulumi.StringInput) WorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Workspace {
		return vs[0].(map[string]*Workspace)[vs[1].(string)]
	}).(WorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInput)(nil)).Elem(), &Workspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceArrayInput)(nil)).Elem(), WorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceMapInput)(nil)).Elem(), WorkspaceMap{})
	pulumi.RegisterOutputType(WorkspaceOutput{})
	pulumi.RegisterOutputType(WorkspaceArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceMapOutput{})
}
